<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMVC工作流程</title>
    <url>/blog/2020/03/06/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h1><hr>
<p> SpringMVC的核心在于它的流程，所以了解SpringMVC的工作流程对于我们使用SpringMVC非常重要，SpringMVC是一种基于Servlet的技术，它提供了核心控制器DispatcherServlet和相关组件。其流程图：</p>
<p><a href="https://garjun-blog-1255506252.cos.ap-guangzhou.myqcloud.com/2020/2715697938.png" target="_blank" rel="noopener">流程图</a></p>
<p>1.首先用户发送一个请求到服务器，在使用springMVC之前，我们应该在web.xml对DispatcherServlet进行配置过了：</p>
<pre><code>&lt;!--使用Spring MVC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,,所以可以配置多个DispatcherServlet--&gt;  
   &lt;servlet&gt;  
       &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;
       &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  
       &lt;!--指明了配置文件的文件名，不使用默认配置文件名，而使用dispatcher-servlet.xml配置文件。--&gt;  
       &lt;init-param&gt;  
           &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  
           &lt;param-value&gt;classpath:spring/dispatcher-servlet.xml&lt;/param-value&gt;  
       &lt;/init-param&gt;  
       &lt;!--是启动顺序，让这个Servlet随Servletp容器一起启动。--&gt; 
       &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; 
   &lt;/servlet&gt;  
   &lt;servlet-mapping&gt;   
       &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;  
       &lt;!--会拦截URL中带“/”的请求。--&gt;  
       &lt;url-pattern&gt;/&lt;/url-pattern&gt; 
   &lt;/servlet-mapping&gt;  </code></pre><p>  如果使用springBoot，那么springBoot会帮我们注册一个默认的DispatcherServlet,而如果该请求与配置中的url-pattern匹配的话，该请求就会交由该DispatcherServlet来进行处理<br>2.DispatcherServlet根据url，遍历HandlerMappings，获得由处理器和拦截器组成的执行链返回给DispatcherServlet,<br>其源码如下，遍历HandlerMappings(初始化时获得），如果当中有一个HandlerMapping调用getHandler方法时返回值不为null，那么getHandler就会返回一个由拦截器和处理器组成的HandlerExecutionChain执行链。</p>
<pre><code>protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {
    for (HandlerMapping hm : this.handlerMappings) {
        if (logger.isTraceEnabled()) {
            logger.trace(
                    &quot;Testing handler map [&quot; + hm + &quot;] in DispatcherServlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);
        }
        HandlerExecutionChain handler = hm.getHandler(request);
        if (handler != null) {
            return handler;
        }
    }
    return null;
}</code></pre><p>3.将获得的执行链返回给DispatcherServlet<br>4.根据获得的Handler调用HandlerAdapter，其实现也是类似，遍历HandlerAdapters,如果类型匹配则返回该HandlerAdapter，源码如下：</p>
<pre><code>protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {
    for (HandlerAdapter ha : this.handlerAdapters) {
        if (ha.supports(handler)) {
            return ha;
        }
    }
    throw new ServletException(&quot;No adapter for handler [&quot; + handler +
            &quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;);
}</code></pre><p>注意：此时会依次执行拦截器的preHandle方法，如果遇到一个拦截器return false就会停止<br>5.提取request中的数据模型，进行数据转换，数据格式化，数据验证等操作，然后执行Handler，调用具体的方法，其实现如下，其中handleInternal由具体的Adapter,比如@RequestMapping注解的handler会由RequestMappingHandlerAdapter来处理。这里就不继续分析源码了，想看源码详细分析的话这个大兄弟写得很好<a href="https://my.oschina.net/marvelcode/blog/1838329" target="_blank" rel="noopener">SpringMVC源码分析（2）：分析HandlerAdapter.handle方法，了解handler方法的调用细节以及@ModelAttribute注解</a>：</p>
<pre><code>public abstract class AbstractHandlerMethodAdapter extends WebContentGenerator implements HandlerAdapter, Ordered {

    private int order = Ordered.LOWEST_PRECEDENCE;
    @Override
    public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)
      throws Exception {
        return handleInternal(request, response, (HandlerMethod) handler);
    }
        //抽象方法，由具体的Adapter实现
        protected abstract ModelAndView handleInternal(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception;

}</code></pre><p>6.handleInternal的具体实现会执行一个invokeHandlerMethod ,执行后会返回一个ModelAndView视图，源码：</p>
<pre><code>protected ModelAndView invokeHandlerMethod(HttpServletRequest request,  
   HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {  
   .........  
   //执行Controller中的RequestMapping注释的方法  
   invocableMethod.invokeAndHandle(webRequest, mavContainer);  

   //返回ModelAndView视图  
   return getModelAndView(mavContainer, modelFactory, webRequest);  
   }  </code></pre><p>7.HandleAdapter返回ModelAndView给DispatcherServlet（注意：在下一步渲染视图之前会执行postHandle方法）<br>8~9.解析视图和渲染视图都是在render方法里面执行的, render方法如下：</p>
<pre><code>    protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Determine locale for request and apply it to the response.
    Locale locale = this.localeResolver.resolveLocale(request);
    response.setLocale(locale);

    View view;
    if (mv.isReference()) {
        // We need to resolve the view name.
        view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);
        if (view == null) {
            throw new ServletException(&quot;Could not resolve view with name &apos;&quot; + mv.getViewName() +
                    &quot;&apos; in servlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);
        }
    }
    else {
        // No need to lookup: the ModelAndView object contains the actual View object.
        view = mv.getView();
        if (view == null) {
            throw new ServletException(&quot;ModelAndView [&quot; + mv + &quot;] neither contains a view name nor a &quot; +
                    &quot;View object in servlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);
        }
    }

    // Delegate to the View object for rendering.
    if (logger.isDebugEnabled()) {
        logger.debug(&quot;Rendering view [&quot; + view + &quot;] in DispatcherServlet with name &apos;&quot; + getServletName() + &quot;&apos;&quot;);
    }
    try {
        view.render(mv.getModelInternal(), request, response);
    }
    catch (Exception ex) {
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;Error rendering view [&quot; + view + &quot;] in DispatcherServlet with name &apos;&quot; +
                    getServletName() + &quot;&apos;&quot;, ex);
        }
        throw ex;
    }
}</code></pre><p>其中，</p>
<pre><code>view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</code></pre><p>这个方法会遍历DispatcherServlet中的ViewResolver集合并返回对应的视图，对应流程图中的第八步和第九步<br>10.上面的render方法中的：</p>
<pre><code>view.render(mv.getModelInternal(), request, response);</code></pre><p>则是渲染视图的方法(渲染视图后会执行拦截器的afterCompletion方法），其实现类源码如下：</p>
<pre><code>public abstract class 

    AbstractView extends WebApplicationObjectSupport implements View, BeanNameAware {
        ... ...
        @Override
        public void render(@Nullable Map&lt;String, ?&gt; model, HttpServletRequest request,
                HttpServletResponse response) throws Exception {

            if (logger.isTraceEnabled()) {
                logger.trace(&quot;Rendering view with name &apos;&quot; + this.beanName + &quot;&apos; with model &quot; + model +
                    &quot; and static attributes &quot; + this.staticAttributes);
            }

            // 创建整合后需要返回给浏览器的Model
            Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);
            // 设置response 报文头
            prepareResponse(request, response);
            // 渲染数据，通过模板方法由子类实现，如InternalResourceView
            renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);
        }
        ... ...
    }</code></pre><p>11.上面view.render方法的最后一步：</p>
<pre><code>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</code></pre><p>其源码如下：</p>
<pre><code>@Override
protected void renderMergedOutputModel(
        Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception {

    // 将model中的数据设置到request
    exposeModelAsRequestAttributes(model, request);

    // 本类中的此函数是空函数，留给子类比如JstlView去实现自定义逻辑
    exposeHelpers(request);

    // 跳转目的页面路径
    String dispatcherPath = prepareForRendering(request, response);

    // 获取跳转控制器RequestDispatcher  
    RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);
    if (rd == null) {
        throw new ServletException(&quot;Could not get RequestDispatcher for [&quot; + getUrl() +
                &quot;]: Check that the corresponding file exists within your web application archive!&quot;);
    }

    // 直接返回用户资源 
    if (useInclude(request, response)) {
        response.setContentType(getContentType());
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;Including resource [&quot; + getUrl() + &quot;] in InternalResourceView &apos;&quot; + getBeanName() + &quot;&apos;&quot;);
        }
        rd.include(request, response);
    }
    // 携带request和response跳转到另一个控制器方法
    else {
        // Note: The forwarded resource is supposed to determine the content type itself.
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;Forwarding to resource [&quot; + getUrl() + &quot;] in InternalResourceView &apos;&quot; + getBeanName() + &quot;&apos;&quot;);
        }
        rd.forward(request, response);
    }
}</code></pre><p>可以看到，这个方法完成了最后把视图封装好和把结果返回给用户的操作</p>
<p>参考：<a href="https://segmentfault.com/a/1190000008471934" target="_blank" rel="noopener">DispatcherServlet来看spring mvc请求处理过程</a><br><a href="https://segmentfault.com/a/1190000015263978" target="_blank" rel="noopener">SpringMVC之源码分析–View（一）</a></p>
]]></content>
  </entry>
</search>
